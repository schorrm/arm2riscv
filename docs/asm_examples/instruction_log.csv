stp,"stp	x29, x30, [sp, -32]!","sd	x8, -32(sp)sd	ra, -24(sp)addi	sp, sp, -32 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
mov,"mov	w0, 32","li	x10, 32"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
mov,"mov	w0, 35","li	x10, 35"
str,"str	w0, [x29, 24]","sw	x10, 24(x8)"
str,"str	wzr, [x29, 28]","sw	x0, 28(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
mov,"mov x10, x0","mv	x6, x10"
mov,"mov x11, x1","mv	x7, x11"
cmp,"cmp x10, x11","sub	x25, x6, x7"
csel,"csel x0, x10, x11, LE","add	x27, x6, x0 # move option s1 to tempble	x25, x0, 999999f # conditionally branch past moving option s2 to temp add	x27, x7, x0 # move s2 to temp999999:add	x10, x0, x27 # move temp to dest"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
bl,bl	printf,call	printf
mov,"mov	w0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 32","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 32 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -48]!","sd	x8, -48(sp)sd	ra, -40(sp)addi	sp, sp, -48 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
ldr,"ldr	d0, [x0]","fld	f10, 0(x10)"
str,"str	d0, [x29, 16]","fsd	f10, 16(x8)"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
ldr,"ldr	d0, [x0]","fld	f10, 0(x10)"
str,"str	d0, [x29, 24]","fsd	f10, 24(x8)"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
ldr,"ldr	d0, [x0]","fld	f10, 0(x10)"
str,"str	d0, [x29, 32]","fsd	f10, 32(x8)"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	puts,call	puts
ldr,"ldr	d1, [x29, 16]","fld	f11, 16(x8)"
ldr,"ldr	d0, [x29, 24]","fld	f10, 24(x8)"
fadd,"fadd	d0, d1, d0","fadd.d	f10, f11, f10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 16]","fld	f11, 16(x8)"
ldr,"ldr	d0, [x29, 24]","fld	f10, 24(x8)"
fsub,"fsub	d0, d1, d0","fsub.d	f10, f11, f10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 16]","fld	f11, 16(x8)"
ldr,"ldr	d0, [x29, 24]","fld	f10, 24(x8)"
fmul,"fmul	d0, d1, d0","fmul.d	f10, f11, f10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC6","lui	x10, %hi(.LC6)"
add,"add	x0, x0, :lo12:.LC6","add	x10, x10, %lo(.LC6)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 16]","fld	f11, 16(x8)"
ldr,"ldr	d0, [x29, 24]","fld	f10, 24(x8)"
fdiv,"fdiv	d0, d1, d0","fdiv.d	f10, f11, f10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC7","lui	x10, %hi(.LC7)"
add,"add	x0, x0, :lo12:.LC7","add	x10, x10, %lo(.LC7)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 16]","ld	x10, 16(x8)"
ldr,"ldr	x1, [x29, 24]","ld	x11, 24(x8)"
ldr,"ldr	x2, [x29, 32]","ld	x12, 32(x8)"
fmov,"fmov	d0, x0","fmv.d.x	f10, x10"
fmov,"fmov	d1, x1","fmv.d.x	f11, x11"
fmov,"fmov	d2, x2","fmv.d.x	f12, x12"
fmadd,"fmadd d0, d0, d1, d2","fmadd.d	f10, f10, f11, f12"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC8","lui	x10, %hi(.LC8)"
add,"add	x0, x0, :lo12:.LC8","add	x10, x10, %lo(.LC8)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 16]","ld	x10, 16(x8)"
ldr,"ldr	x1, [x29, 24]","ld	x11, 24(x8)"
ldr,"ldr	x2, [x29, 32]","ld	x12, 32(x8)"
fmov,"fmov	d0, x0","fmv.d.x	f10, x10"
fmov,"fmov	d1, x1","fmv.d.x	f11, x11"
fmov,"fmov	d2, x2","fmv.d.x	f12, x12"
fmsub,"fmsub d0, d0, d1, d2","fnmsub.d	f10, f10, f11, f12"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC9","lui	x10, %hi(.LC9)"
add,"add	x0, x0, :lo12:.LC9","add	x10, x10, %lo(.LC9)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 16]","ld	x10, 16(x8)"
ldr,"ldr	x1, [x29, 24]","ld	x11, 24(x8)"
ldr,"ldr	x2, [x29, 32]","ld	x12, 32(x8)"
fmov,"fmov	d0, x0","fmv.d.x	f10, x10"
fmov,"fmov	d1, x1","fmv.d.x	f11, x11"
fmov,"fmov	d2, x2","fmv.d.x	f12, x12"
fnmsub,"fnmsub d0, d0, d1, d2","fmsub.d	f10, f10, f11, f12"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC10","lui	x10, %hi(.LC10)"
add,"add	x0, x0, :lo12:.LC10","add	x10, x10, %lo(.LC10)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 16]","ld	x10, 16(x8)"
ldr,"ldr	x1, [x29, 24]","ld	x11, 24(x8)"
ldr,"ldr	x2, [x29, 32]","ld	x12, 32(x8)"
fmov,"fmov	d0, x0","fmv.d.x	f10, x10"
fmov,"fmov	d1, x1","fmv.d.x	f11, x11"
fmov,"fmov	d2, x2","fmv.d.x	f12, x12"
fnmadd,"fnmadd d0, d0, d1, d2","fnmadd.d	f10, f10, f11, f12"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC11","lui	x10, %hi(.LC11)"
add,"add	x0, x0, :lo12:.LC11","add	x10, x10, %lo(.LC11)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 16]","ld	x10, 16(x8)"
fmov,"fmov	d0, x0","fmv.d.x	f10, x10"
fneg,"fneg d0, d0","fneg.d	f10, f10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC12","lui	x10, %hi(.LC12)"
add,"add	x0, x0, :lo12:.LC12","add	x10, x10, %lo(.LC12)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 16]","ld	x10, 16(x8)"
fmov,"fmov	d0, x0","fmv.d.x	f10, x10"
fsqrt,"fsqrt d0, d0","fsqrt.d	f10, f10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
adrp,"adrp	x0, .LC13","lui	x10, %hi(.LC13)"
add,"add	x0, x0, :lo12:.LC13","add	x10, x10, %lo(.LC13)"
bl,bl	printf,call	printf
mov,"mov	w0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 48","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 48 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -16]!","sd	x8, -16(sp)sd	ra, -8(sp)addi	sp, sp, -16 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
bl,bl	rand,call	rand
scvtf,"scvtf	d0, w0","fcvt.d.w	f10, x10"
mov,"mov	x0, 281474972516352","li	x10, 281474972516352"
movk,"movk	x0, 0x41df, lsl 48","not	x27, x0 # set reg to all onessrli	x27, x27, 48 # this clears the upper 48 bits in the mask. We'll invert it to get the final maskli	x26, 16863 # load our immediate valueslli	x26, x26, 48 # move the immediate to the parallel placeslli	x27, x27, 48 # move the mask to the parallel placenot	x27, x27 # flip the mask to AND againstand	x10, x10, x27 # clear the target bits in maskor	x10, x10, x26 # or in the bits from the immediate to load"
fmov,"fmov	d1, x0","fmv.d.x	f11, x10"
fdiv,"fdiv	d0, d0, d1","fdiv.d	f10, f10, f11"
ldp,"ldp	x29, x30, [sp], 16","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 16 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -48]!","sd	x8, -48(sp)sd	ra, -40(sp)addi	sp, sp, -48 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
mov,"mov	w0, 123","li	x10, 123"
bl,bl	srand,call	srand
mov,"mov	w0, 2","li	x10, 2"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
scvtf,"scvtf	d0, w0","fcvt.d.w	f10, x10"
str,"str	d0, [x29, 32]","fsd	f10, 32(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
scvtf,"scvtf	d0, w0","fcvt.d.w	f10, x10"
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
str,"str	wzr, [x29, 24]","sw	x0, 24(x8)"
b,b	.L4,j	.L4
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x2, [x29, 40]","ld	x12, 40(x8)"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 32]","fld	f11, 32(x8)"
ldr,"ldr	d0, [x29, 40]","fld	f10, 40(x8)"
fcmpe,"fcmpe	d1, d0","flt.d	x25, f11, f10 # this is less than, RHS is biggerslli	x25, x25, 63 # move it to the sign bit locationflt.d	x27, f10, f11 # if LHS is biggeror	x25, x25, x27 # or the results together"
bpl,bpl	.L5,"bge	x25, x0, .L5"
mov,"mov	w0, 60","li	x10, 60"
bl,bl	putchar,call	putchar
ldr,"ldr	d1, [x29, 32]","fld	f11, 32(x8)"
ldr,"ldr	d0, [x29, 40]","fld	f10, 40(x8)"
fcmpe,"fcmpe	d1, d0","flt.d	x25, f11, f10 # this is less than, RHS is biggerslli	x25, x25, 63 # move it to the sign bit locationflt.d	x27, f10, f11 # if LHS is biggeror	x25, x25, x27 # or the results together"
ble,ble	.L7,"ble	x25, x0, .L7"
mov,"mov	w0, 62","li	x10, 62"
bl,bl	putchar,call	putchar
ldr,"ldr	d1, [x29, 32]","fld	f11, 32(x8)"
ldr,"ldr	d0, [x29, 40]","fld	f10, 40(x8)"
fcmpe,"fcmpe	d1, d0","flt.d	x25, f11, f10 # this is less than, RHS is biggerslli	x25, x25, 63 # move it to the sign bit locationflt.d	x27, f10, f11 # if LHS is biggeror	x25, x25, x27 # or the results together"
bhi,bhi	.L9,"bgt	x25, x0, .L9"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 32]","fld	f11, 32(x8)"
ldr,"ldr	d0, [x29, 40]","fld	f10, 40(x8)"
fcmpe,"fcmpe	d1, d0","flt.d	x25, f11, f10 # this is less than, RHS is biggerslli	x25, x25, 63 # move it to the sign bit locationflt.d	x27, f10, f11 # if LHS is biggeror	x25, x25, x27 # or the results together"
blt,blt	.L11,"blt	x25, x0, .L11"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 32]","fld	f11, 32(x8)"
ldr,"ldr	d0, [x29, 40]","fld	f10, 40(x8)"
fcmp,"fcmp	d1, d0","flt.d	x25, f11, f10 # this is less than, RHS is biggerslli	x25, x25, 63 # move it to the sign bit locationflt.d	x27, f10, f11 # if LHS is biggeror	x25, x25, x27 # or the results together"
bne,bne	.L13,"bne	x25, x0, .L13"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
ldr,"ldr	d1, [x29, 32]","fld	f11, 32(x8)"
ldr,"ldr	d0, [x29, 40]","fld	f10, 40(x8)"
fcmp,"fcmp	d1, d0","flt.d	x25, f11, f10 # this is less than, RHS is biggerslli	x25, x25, 63 # move it to the sign bit locationflt.d	x27, f10, f11 # if LHS is biggeror	x25, x25, x27 # or the results together"
beq,beq	.L14,"beq	x25, x0, .L14"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
mov,"mov	w0, 10","li	x10, 10"
bl,bl	putchar,call	putchar
bl,bl	random_double,call	random_double
str,"str	d0, [x29, 32]","fsd	f10, 32(x8)"
bl,bl	random_double,call	random_double
str,"str	d0, [x29, 40]","fsd	f10, 40(x8)"
ldr,"ldr	w0, [x29, 24]","lw	x10, 24(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 24]","sw	x10, 24(x8)"
ldr,"ldr	w0, [x29, 24]","lw	x10, 24(x8)"
cmp,"cmp	w0, 999","addi	x25, x10, -999"
ble,ble	.L15,"ble	x25, x0, .L15"
mov,"mov	w0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 48","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 48 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -16]!","sd	x8, -16(sp)sd	ra, -8(sp)addi	sp, sp, -16 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
bl,bl	puts,call	puts
mov,"mov	w0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 16","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 16 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -128]!","sd	x8, -128(sp)sd	ra, -120(sp)addi	sp, sp, -128 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
str,"str	x19, [sp, 16]","sd	x18, 16(sp)"
str,"str	x0, [x29, 56]","sd	x10, 56(x8)"
str,"str	w1, [x29, 52]","sw	x11, 52(x8)"
str,"str	w2, [x29, 48]","sw	x12, 48(x8)"
str,"str	w3, [x29, 44]","sw	x13, 44(x8)"
adrp,"adrp	x0, :got:__stack_chk_guard","lui	x10, %hi(__stack_chk_guard)"
ldr,"ldr	x0, [x0, :got_lo12:__stack_chk_guard]","add	x10, x10, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
str,"str	x1, [x29, 120]","sd	x11, 120(x8)"
mov,"mov	x1,0","li	x11, 0"
mov,"mov	x0, sp","mv	x10, sp"
mov,"mov	x3, x0","mv	x13, x10"
ldr,"ldr	w1, [x29, 48]","lw	x11, 48(x8)"
ldr,"ldr	w0, [x29, 52]","lw	x10, 52(x8)"
sub,"sub	w0, w1, w0","subw	x10, x11, x10"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 80]","sw	x10, 80(x8)"
ldr,"ldr	w1, [x29, 44]","lw	x11, 44(x8)"
ldr,"ldr	w0, [x29, 48]","lw	x10, 48(x8)"
sub,"sub	w0, w1, w0","subw	x10, x11, x10"
str,"str	w0, [x29, 84]","sw	x10, 84(x8)"
ldr,"ldr	w0, [x29, 80]","lw	x10, 80(x8)"
sxtw,"sxtw	x1, w0","sext.w	x11, x10"
sub,"sub	x1, x1, 1","addi	x11, x11, -1"
str,"str	x1, [x29, 88]","sd	x11, 88(x8)"
sxtw,"sxtw	x1, w0","sext.w	x11, x10"
mov,"mov	x18, x1","ld	x22, 8(x21) # load of mmapped registermv	x22, x11sd	x22, 8(x21) # store of mmapped register"
mov,"mov	x19, 0","li	x18, 0"
lsr,"lsr	x1, x18, 59","ld	x22, 8(x21) # load of mmapped registersrli	x11, x22, 59"
lsl,"lsl	x11, x19, 5","slli	x7, x18, 5"
orr,"orr	x11, x1, x11","or	x7, x11, x7"
lsl,"lsl	x10, x18, 5","ld	x22, 8(x21) # load of mmapped registerslli	x6, x22, 5"
sxtw,"sxtw	x1, w0","sext.w	x11, x10"
mov,"mov	x16, x1","mv	x27, x11"
mov,"mov	x17, 0","ld	x22, 0(x21) # load of mmapped registerli	x22, 0sd	x22, 0(x21) # store of mmapped register"
lsr,"lsr	x1, x16, 59","srli	x11, x27, 59"
lsl,"lsl	x9, x17, 5","ld	x22, 0(x21) # load of mmapped registerslli	x5, x22, 5"
orr,"orr	x9, x1, x9","or	x5, x11, x5"
lsl,"lsl	x8, x16, 5","slli	x9, x27, 5"
sxtw,"sxtw	x0, w0","sext.w	x10, x10"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
add,"add	x0, x0, 3","addi	x10, x10, 3"
add,"add	x0, x0, 15","addi	x10, x10, 15"
lsr,"lsr	x0, x0, 4","srli	x10, x10, 4"
lsl,"lsl	x0, x0, 4","slli	x10, x10, 4"
sub,"sub	sp, sp, x0","sub	sp, sp, x10"
mov,"mov	x0, sp","mv	x10, sp"
add,"add	x0, x0, 3","addi	x10, x10, 3"
lsr,"lsr	x0, x0, 2","srli	x10, x10, 2"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
str,"str	x0, [x29, 96]","sd	x10, 96(x8)"
ldr,"ldr	w0, [x29, 84]","lw	x10, 84(x8)"
sxtw,"sxtw	x1, w0","sext.w	x11, x10"
sub,"sub	x1, x1, 1","addi	x11, x11, -1"
str,"str	x1, [x29, 104]","sd	x11, 104(x8)"
sxtw,"sxtw	x1, w0","sext.w	x11, x10"
mov,"mov	x14, x1","mv	x30, x11"
mov,"mov	x15, 0","li	x31, 0"
lsr,"lsr	x1, x14, 59","srli	x11, x30, 59"
lsl,"lsl	x7, x15, 5","slli	x17, x31, 5"
orr,"orr	x7, x1, x7","or	x17, x11, x17"
lsl,"lsl	x6, x14, 5","slli	x16, x30, 5"
sxtw,"sxtw	x1, w0","sext.w	x11, x10"
mov,"mov	x12, x1","mv	x28, x11"
mov,"mov	x13, 0","li	x29, 0"
lsr,"lsr	x1, x12, 59","srli	x11, x28, 59"
lsl,"lsl	x5, x13, 5","slli	x15, x29, 5"
orr,"orr	x5, x1, x5","or	x15, x11, x15"
lsl,"lsl	x4, x12, 5","slli	x14, x28, 5"
sxtw,"sxtw	x0, w0","sext.w	x10, x10"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
add,"add	x0, x0, 3","addi	x10, x10, 3"
add,"add	x0, x0, 15","addi	x10, x10, 15"
lsr,"lsr	x0, x0, 4","srli	x10, x10, 4"
lsl,"lsl	x0, x0, 4","slli	x10, x10, 4"
sub,"sub	sp, sp, x0","sub	sp, sp, x10"
mov,"mov	x0, sp","mv	x10, sp"
add,"add	x0, x0, 3","addi	x10, x10, 3"
lsr,"lsr	x0, x0, 2","srli	x10, x10, 2"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
str,"str	x0, [x29, 112]","sd	x10, 112(x8)"
str,"str	wzr, [x29, 76]","sw	x0, 76(x8)"
b,b	.L2,j	.L2
ldr,"ldr	w1, [x29, 52]","lw	x11, 52(x8)"
ldr,"ldr	w0, [x29, 76]","lw	x10, 76(x8)"
add,"add	w0, w1, w0","addw	x10, x11, x10"
sxtw,"sxtw	x0, w0","sext.w	x10, x10"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 56]","ld	x11, 56(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	w2, [x0]","lw	x12, 0(x10)"
ldr,"ldr	x0, [x29, 96]","ld	x10, 96(x8)"
ldrsw,"ldrsw	x1, [x29, 76]","lw	x11, 76(x8)"
str,"str	w2, [x0, x1, lsl 2]","slli	x26, x11, 2"
str,"str	w2, [x0, x1, lsl 2]","add	x26, x26, x10 # converting offset register to addsw	x12, 0(x26)"
ldr,"ldr	w0, [x29, 76]","lw	x10, 76(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 76]","sw	x10, 76(x8)"
ldr,"ldr	w1, [x29, 76]","lw	x11, 76(x8)"
ldr,"ldr	w0, [x29, 80]","lw	x10, 80(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
blt,blt	.L3,"blt	x25, x0, .L3"
str,"str	wzr, [x29, 72]","sw	x0, 72(x8)"
b,b	.L4,j	.L4
ldr,"ldr	w0, [x29, 48]","lw	x10, 48(x8)"
add,"add	w1, w0, 1","addiw	x11, x10, 1"
ldr,"ldr	w0, [x29, 72]","lw	x10, 72(x8)"
add,"add	w0, w1, w0","addw	x10, x11, x10"
sxtw,"sxtw	x0, w0","sext.w	x10, x10"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 56]","ld	x11, 56(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	w2, [x0]","lw	x12, 0(x10)"
ldr,"ldr	x0, [x29, 112]","ld	x10, 112(x8)"
ldrsw,"ldrsw	x1, [x29, 72]","lw	x11, 72(x8)"
str,"str	w2, [x0, x1, lsl 2]","slli	x26, x11, 2"
str,"str	w2, [x0, x1, lsl 2]","add	x26, x26, x10 # converting offset register to addsw	x12, 0(x26)"
ldr,"ldr	w0, [x29, 72]","lw	x10, 72(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 72]","sw	x10, 72(x8)"
ldr,"ldr	w1, [x29, 72]","lw	x11, 72(x8)"
ldr,"ldr	w0, [x29, 84]","lw	x10, 84(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
blt,blt	.L5,"blt	x25, x0, .L5"
str,"str	wzr, [x29, 76]","sw	x0, 76(x8)"
str,"str	wzr, [x29, 72]","sw	x0, 72(x8)"
ldr,"ldr	w0, [x29, 52]","lw	x10, 52(x8)"
str,"str	w0, [x29, 68]","sw	x10, 68(x8)"
b,b	.L6,j	.L6
ldr,"ldr	x0, [x29, 96]","ld	x10, 96(x8)"
ldrsw,"ldrsw	x1, [x29, 76]","lw	x11, 76(x8)"
ldr,"ldr	w1, [x0, x1, lsl 2]","slli	x26, x11, 2"
ldr,"ldr	w1, [x0, x1, lsl 2]","add	x26, x26, x10 # converting offset register to addlw	x11, 0(x26)"
ldr,"ldr	x0, [x29, 112]","ld	x10, 112(x8)"
ldrsw,"ldrsw	x2, [x29, 72]","lw	x12, 72(x8)"
ldr,"ldr	w0, [x0, x2, lsl 2]","slli	x26, x12, 2"
ldr,"ldr	w0, [x0, x2, lsl 2]","add	x26, x26, x10 # converting offset register to addlw	x10, 0(x26)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
bgt,bgt	.L7,"bgt	x25, x0, .L7"
ldrsw,"ldrsw	x0, [x29, 68]","lw	x10, 68(x8)"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 56]","ld	x11, 56(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	x1, [x29, 96]","ld	x11, 96(x8)"
ldrsw,"ldrsw	x2, [x29, 76]","lw	x12, 76(x8)"
ldr,"ldr	w1, [x1, x2, lsl 2]","slli	x26, x12, 2"
ldr,"ldr	w1, [x1, x2, lsl 2]","add	x26, x26, x11 # converting offset register to addlw	x11, 0(x26)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
ldr,"ldr	w0, [x29, 76]","lw	x10, 76(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 76]","sw	x10, 76(x8)"
b,b	.L8,j	.L8
ldrsw,"ldrsw	x0, [x29, 68]","lw	x10, 68(x8)"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 56]","ld	x11, 56(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	x1, [x29, 112]","ld	x11, 112(x8)"
ldrsw,"ldrsw	x2, [x29, 72]","lw	x12, 72(x8)"
ldr,"ldr	w1, [x1, x2, lsl 2]","slli	x26, x12, 2"
ldr,"ldr	w1, [x1, x2, lsl 2]","add	x26, x26, x11 # converting offset register to addlw	x11, 0(x26)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
ldr,"ldr	w0, [x29, 72]","lw	x10, 72(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 72]","sw	x10, 72(x8)"
ldr,"ldr	w0, [x29, 68]","lw	x10, 68(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 68]","sw	x10, 68(x8)"
ldr,"ldr	w1, [x29, 76]","lw	x11, 76(x8)"
ldr,"ldr	w0, [x29, 80]","lw	x10, 80(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
bge,bge	.L11,"bge	x25, x0, .L11"
ldr,"ldr	w1, [x29, 72]","lw	x11, 72(x8)"
ldr,"ldr	w0, [x29, 84]","lw	x10, 84(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
blt,blt	.L10,"blt	x25, x0, .L10"
b,b	.L11,j	.L11
ldrsw,"ldrsw	x0, [x29, 68]","lw	x10, 68(x8)"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 56]","ld	x11, 56(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	x1, [x29, 96]","ld	x11, 96(x8)"
ldrsw,"ldrsw	x2, [x29, 76]","lw	x12, 76(x8)"
ldr,"ldr	w1, [x1, x2, lsl 2]","slli	x26, x12, 2"
ldr,"ldr	w1, [x1, x2, lsl 2]","add	x26, x26, x11 # converting offset register to addlw	x11, 0(x26)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
ldr,"ldr	w0, [x29, 76]","lw	x10, 76(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 76]","sw	x10, 76(x8)"
ldr,"ldr	w0, [x29, 68]","lw	x10, 68(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 68]","sw	x10, 68(x8)"
ldr,"ldr	w1, [x29, 76]","lw	x11, 76(x8)"
ldr,"ldr	w0, [x29, 80]","lw	x10, 80(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
blt,blt	.L12,"blt	x25, x0, .L12"
b,b	.L13,j	.L13
ldrsw,"ldrsw	x0, [x29, 68]","lw	x10, 68(x8)"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 56]","ld	x11, 56(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	x1, [x29, 112]","ld	x11, 112(x8)"
ldrsw,"ldrsw	x2, [x29, 72]","lw	x12, 72(x8)"
ldr,"ldr	w1, [x1, x2, lsl 2]","slli	x26, x12, 2"
ldr,"ldr	w1, [x1, x2, lsl 2]","add	x26, x26, x11 # converting offset register to addlw	x11, 0(x26)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
ldr,"ldr	w0, [x29, 72]","lw	x10, 72(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 72]","sw	x10, 72(x8)"
ldr,"ldr	w0, [x29, 68]","lw	x10, 68(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 68]","sw	x10, 68(x8)"
ldr,"ldr	w1, [x29, 72]","lw	x11, 72(x8)"
ldr,"ldr	w0, [x29, 84]","lw	x10, 84(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
blt,blt	.L14,"blt	x25, x0, .L14"
mov,"mov	sp, x3","mv	sp, x13"
nop,nop,nop
adrp,"adrp	x0, :got:__stack_chk_guard","lui	x10, %hi(__stack_chk_guard)"
ldr,"ldr	x0, [x0, :got_lo12:__stack_chk_guard]","add	x10, x10, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x1, [x29, 120]","ld	x11, 120(x8)"
ldr,"ldr	x0, [x0]","ld	x10, 0(x10)"
eor,"eor	x0, x1, x0","xor	x10, x11, x10"
cmp,"cmp	x0, 0","addi	x25, x10, 0"
beq,beq	.L15,"beq	x25, x0, .L15"
bl,bl	__stack_chk_fail,call	__stack_chk_fail
add,"add	sp, x29, 0","addi	sp, x8, 0"
ldr,"ldr	x19, [sp, 16]","ld	x18, 16(sp)"
ldp,"ldp	x29, x30, [sp], 128","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 128 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -48]!","sd	x8, -48(sp)sd	ra, -40(sp)addi	sp, sp, -48 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
str,"str	x0, [x29, 24]","sd	x10, 24(x8)"
str,"str	w1, [x29, 20]","sw	x11, 20(x8)"
str,"str	w2, [x29, 16]","sw	x12, 16(x8)"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
ldr,"ldr	w0, [x29, 16]","lw	x10, 16(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
bge,bge	.L18,"bge	x25, x0, .L18"
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sub,"sub	w0, w1, w0","subw	x10, x11, x10"
lsr,"lsr	w1, w0, 31","srliw	x11, x10, 31"
add,"add	w0, w1, w0","addw	x10, x11, x10"
asr,"asr	w0, w0, 1","sraiw	x10, x10, 1"
mov,"mov	w1, w0","mv	x11, x10"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
add,"add	w0, w0, w1","addw	x10, x10, x11"
str,"str	w0, [x29, 44]","sw	x10, 44(x8)"
ldr,"ldr	w2, [x29, 44]","lw	x12, 44(x8)"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
ldr,"ldr	x0, [x29, 24]","ld	x10, 24(x8)"
bl,bl	mergeSort,call	mergeSort
ldr,"ldr	w0, [x29, 44]","lw	x10, 44(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
ldr,"ldr	w2, [x29, 16]","lw	x12, 16(x8)"
mov,"mov	w1, w0","mv	x11, x10"
ldr,"ldr	x0, [x29, 24]","ld	x10, 24(x8)"
bl,bl	mergeSort,call	mergeSort
ldr,"ldr	w3, [x29, 16]","lw	x13, 16(x8)"
ldr,"ldr	w2, [x29, 44]","lw	x12, 44(x8)"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
ldr,"ldr	x0, [x29, 24]","ld	x10, 24(x8)"
bl,bl	merge,call	merge
nop,nop,nop
ldp,"ldp	x29, x30, [sp], 48","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 48 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -48]!","sd	x8, -48(sp)sd	ra, -40(sp)addi	sp, sp, -48 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
str,"str	x0, [x29, 24]","sd	x10, 24(x8)"
str,"str	w1, [x29, 20]","sw	x11, 20(x8)"
str,"str	wzr, [x29, 44]","sw	x0, 44(x8)"
b,b	.L20,j	.L20
ldrsw,"ldrsw	x0, [x29, 44]","lw	x10, 44(x8)"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
ldr,"ldr	x1, [x29, 24]","ld	x11, 24(x8)"
add,"add	x0, x1, x0","add	x10, x11, x10"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 44]","lw	x10, 44(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 44]","sw	x10, 44(x8)"
ldr,"ldr	w1, [x29, 44]","lw	x11, 44(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
blt,blt	.L21,"blt	x25, x0, .L21"
mov,"mov	w0, 10","li	x10, 10"
bl,bl	putchar,call	putchar
nop,nop,nop
ldp,"ldp	x29, x30, [sp], 48","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 48 # writeback"
ret,ret,ret
mov,"mov	x16, 40032","li	x27, 40032"
sub,"sub	sp, sp, x16","sub	sp, sp, x27"
stp,"stp	x29, x30, [sp]","sd	x8, 0(sp)sd	ra, 8(sp)"
add,"add	x29, sp, 0","addi	x8, sp, 0"
adrp,"adrp	x0, :got:__stack_chk_guard","lui	x10, %hi(__stack_chk_guard)"
ldr,"ldr	x0, [x0, :got_lo12:__stack_chk_guard]","add	x10, x10, %lo(__stack_chk_guard) # load from GOT -> ADD!"
add,"add	x1, x29, 32768","li	x26, 32768 # synthesis of oversized immediateadd	x11, x8, x26"
ldr,"ldr	x2, [x0]","ld	x12, 0(x10)"
str,"str	x2, [x1, 7256]","li	x26, 7256 # synthesis of oversized immediateadd	x26, x26, x11 # converting offset register to addsd	x12, 0(x26)"
mov,"mov	x2,0","li	x12, 0"
mov,"mov	w0, 1234","li	x10, 1234"
bl,bl	srand,call	srand
str,"str	wzr, [x29, 16]","sw	x0, 16(x8)"
b,b	.L23,j	.L23
bl,bl	random,call	random
mov,"mov	w2, w0","mv	x12, x10"
ldrsw,"ldrsw	x0, [x29, 16]","lw	x10, 16(x8)"
lsl,"lsl	x0, x0, 2","slli	x10, x10, 2"
add,"add	x1, x29, 24","addi	x11, x8, 24"
str,"str	w2, [x1, x0]","add	x26, x10, x11 # converting offset register to addsw	x12, 0(x26)"
ldr,"ldr	w0, [x29, 16]","lw	x10, 16(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 16]","sw	x10, 16(x8)"
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
mov,"mov	w0, 9999","li	x10, 9999"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
ble,ble	.L24,"ble	x25, x0, .L24"
mov,"mov	w0, 10000","li	x10, 10000"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	puts,call	puts
add,"add	x0, x29, 24","addi	x10, x8, 24"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
bl,bl	printArray,call	printArray
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sub,"sub	w1, w0, 1","addiw	x11, x10, -1"
add,"add	x0, x29, 24","addi	x10, x8, 24"
mov,"mov	w2, w1","mv	x12, x11"
mov,"mov	w1, 0","li	x11, 0"
bl,bl	mergeSort,call	mergeSort
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	puts,call	puts
add,"add	x0, x29, 24","addi	x10, x8, 24"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
bl,bl	printArray,call	printArray
mov,"mov	w0, 0","li	x10, 0"
adrp,"adrp	x1, :got:__stack_chk_guard","lui	x11, %hi(__stack_chk_guard)"
ldr,"ldr	x1, [x1, :got_lo12:__stack_chk_guard]","add	x11, x11, %lo(__stack_chk_guard) # load from GOT -> ADD!"
add,"add	x2, x29, 32768","li	x26, 32768 # synthesis of oversized immediateadd	x12, x8, x26"
ldr,"ldr	x3, [x2, 7256]","li	x26, 7256 # synthesis of oversized immediateadd	x26, x26, x12 # converting offset register to addld	x13, 0(x26)"
ldr,"ldr	x1, [x1]","ld	x11, 0(x11)"
eor,"eor	x1, x3, x1","xor	x11, x13, x11"
cmp,"cmp	x1, 0","addi	x25, x11, 0"
beq,beq	.L26,"beq	x25, x0, .L26"
bl,bl	__stack_chk_fail,call	__stack_chk_fail
ldp,"ldp	x29, x30, [sp]","ld	x8, 0(sp)ld	ra, 8(sp)"
mov,"mov	x16, 40032","li	x27, 40032"
add,"add	sp, sp, x16","add	sp, sp, x27"
ret,ret,ret
mov,"mov	x16, 20048","li	x27, 20048"
sub,"sub	sp, sp, x16","sub	sp, sp, x27"
stp,"stp	x29, x30, [sp]","sd	x8, 0(sp)sd	ra, 8(sp)"
add,"add	x29, sp, 0","addi	x8, sp, 0"
adrp,"adrp	x0, :got:__stack_chk_guard","lui	x10, %hi(__stack_chk_guard)"
ldr,"ldr	x0, [x0, :got_lo12:__stack_chk_guard]","add	x10, x10, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
str,"str	x1, [x29, 20040]","li	x26, 20040 # synthesis of oversized immediateadd	x26, x26, x8 # converting offset register to addsd	x11, 0(x26)"
mov,"mov	x1,0","li	x11, 0"
add,"add	x0, x29, 32","addi	x10, x8, 32"
mov,"mov	x1, 20002","li	x11, 20002"
mov,"mov	x2, x1","mv	x12, x11"
mov,"mov	w1, 0","li	x11, 0"
bl,bl	memset,call	memset
mov,"mov	w0, 2","li	x10, 2"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
b,b	.L2,j	.L2
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
lsl,"lsl	w0, w0, 1","slliw	x10, x10, 1"
str,"str	w0, [x29, 24]","sw	x10, 24(x8)"
b,b	.L3,j	.L3
ldrsw,"ldrsw	x0, [x29, 24]","lw	x10, 24(x8)"
lsl,"lsl	x0, x0, 1","slli	x10, x10, 1"
add,"add	x1, x29, 32","addi	x11, x8, 32"
mov,"mov	w2, 1","li	x12, 1"
strh,"strh	w2, [x1, x0]","add	x26, x10, x11 # converting offset register to addsh	x12, 0(x26)"
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
add,"add	w0, w1, w0","addw	x10, x11, x10"
str,"str	w0, [x29, 24]","sw	x10, 24(x8)"
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
mov,"mov	w0, 10000","li	x10, 10000"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
ble,ble	.L4,"ble	x25, x0, .L4"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
cmp,"cmp	w0, 100","addi	x25, x10, -100"
ble,ble	.L5,"ble	x25, x0, .L5"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
mov,"mov	w1, 10000","li	x11, 10000"
bl,bl	printf,call	printf
mov,"mov	w0, 2","li	x10, 2"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
b,b	.L6,j	.L6
ldrsw,"ldrsw	x0, [x29, 28]","lw	x10, 28(x8)"
lsl,"lsl	x0, x0, 1","slli	x10, x10, 1"
add,"add	x1, x29, 32","addi	x11, x8, 32"
ldrsh,"ldrsh	w0, [x1, x0]","add	x26, x10, x11 # converting offset register to addlh	x10, 0(x26)"
cmp,"cmp	w0, 0","addi	x25, x10, 0"
bne,bne	.L7,"bne	x25, x0, .L7"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
mov,"mov	w0, 10000","li	x10, 10000"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
ble,ble	.L8,"ble	x25, x0, .L8"
mov,"mov	w0, 10","li	x10, 10"
bl,bl	putchar,call	putchar
mov,"mov	w0, 0","li	x10, 0"
adrp,"adrp	x1, :got:__stack_chk_guard","lui	x11, %hi(__stack_chk_guard)"
ldr,"ldr	x1, [x1, :got_lo12:__stack_chk_guard]","add	x11, x11, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x2, [x29, 20040]","li	x26, 20040 # synthesis of oversized immediateadd	x26, x26, x8 # converting offset register to addld	x12, 0(x26)"
ldr,"ldr	x1, [x1]","ld	x11, 0(x11)"
eor,"eor	x1, x2, x1","xor	x11, x12, x11"
cmp,"cmp	x1, 0","addi	x25, x11, 0"
beq,beq	.L10,"beq	x25, x0, .L10"
bl,bl	__stack_chk_fail,call	__stack_chk_fail
ldp,"ldp	x29, x30, [sp]","ld	x8, 0(sp)ld	ra, 8(sp)"
mov,"mov	x16, 20048","li	x27, 20048"
add,"add	sp, sp, x16","add	sp, sp, x27"
ret,ret,ret
stp,"stp	x29, x30, [sp, -32]!","sd	x8, -32(sp)sd	ra, -24(sp)addi	sp, sp, -32 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
mov,"mov	w0, 99","li	x10, 99"
str,"str	w0, [x29, 16]","sw	x10, 16(x8)"
mov,"mov	w0, 10","li	x10, 10"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
bl,bl	puts,call	puts
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
add,"add	w1, w1, w0","addw	x11, x11, x10"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sub,"sub	w1, w1, w0","subw	x11, x11, x10"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
mul,"mul	w1, w1, w0","mulw	x11, x11, x10"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sdiv,"sdiv	w1, w1, w0","divw	x11, x11, x10"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 16]","lw	x10, 16(x8)"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
sdiv,"sdiv	w2, w0, w1","divw	x12, x10, x11"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
mul,"mul	w1, w2, w1","mulw	x11, x12, x11"
sub,"sub	w1, w0, w1","subw	x11, x10, x11"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
mov,"mov	w0, 99","li	x10, 99"
str,"str	w0, [x29, 24]","sw	x10, 24(x8)"
mov,"mov	w0, 10","li	x10, 10"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
adrp,"adrp	x0, .LC6","lui	x10, %hi(.LC6)"
add,"add	x0, x0, :lo12:.LC6","add	x10, x10, %lo(.LC6)"
bl,bl	puts,call	puts
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w1, w1, w0","addw	x11, x11, x10"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
sub,"sub	w1, w1, w0","subw	x11, x11, x10"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
mul,"mul	w1, w1, w0","mulw	x11, x11, x10"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
udiv,"udiv	w1, w1, w0","divuw	x11, x11, x10"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 24]","lw	x10, 24(x8)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
udiv,"udiv	w2, w0, w1","divuw	x12, x10, x11"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
mul,"mul	w1, w2, w1","mulw	x11, x12, x11"
sub,"sub	w1, w0, w1","subw	x11, x10, x11"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
mov,"mov	w0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 32","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 32 # writeback"
ret,ret,ret
stp,"stp	x29, x30, [sp, -64]!","sd	x8, -64(sp)sd	ra, -56(sp)addi	sp, sp, -64 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
mov,"mov	w0, 99","li	x10, 99"
str,"str	w0, [x29, 16]","sw	x10, 16(x8)"
mov,"mov	w0, 10","li	x10, 10"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
bl,bl	puts,call	puts
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
add,"add	w1, w1, w0","addw	x11, x11, x10"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sub,"sub	w1, w1, w0","subw	x11, x11, x10"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
mul,"mul	w1, w1, w0","mulw	x11, x11, x10"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sdiv,"sdiv	w1, w1, w0","divw	x11, x11, x10"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 16]","lw	x10, 16(x8)"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
sdiv,"sdiv	w2, w0, w1","divw	x12, x10, x11"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
mul,"mul	w1, w2, w1","mulw	x11, x12, x11"
sub,"sub	w1, w0, w1","subw	x11, x10, x11"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 16]","lw	x10, 16(x8)"
neg,"neg	w0, w0","sub	x10, x0, x10"
str,"str	w0, [x29, 16]","sw	x10, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
neg,"neg	w0, w0","sub	x10, x0, x10"
str,"str	w0, [x29, 20]","sw	x10, 20(x8)"
adrp,"adrp	x0, .LC6","lui	x10, %hi(.LC6)"
add,"add	x0, x0, :lo12:.LC6","add	x10, x10, %lo(.LC6)"
bl,bl	puts,call	puts
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
add,"add	w1, w1, w0","addw	x11, x11, x10"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sub,"sub	w1, w1, w0","subw	x11, x11, x10"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
mul,"mul	w1, w1, w0","mulw	x11, x11, x10"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 16]","lw	x11, 16(x8)"
ldr,"ldr	w0, [x29, 20]","lw	x10, 20(x8)"
sdiv,"sdiv	w1, w1, w0","divw	x11, x11, x10"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 16]","lw	x10, 16(x8)"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
sdiv,"sdiv	w2, w0, w1","divw	x12, x10, x11"
ldr,"ldr	w1, [x29, 20]","lw	x11, 20(x8)"
mul,"mul	w1, w2, w1","mulw	x11, x12, x11"
sub,"sub	w1, w0, w1","subw	x11, x10, x11"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
mov,"mov	w0, 99","li	x10, 99"
str,"str	w0, [x29, 24]","sw	x10, 24(x8)"
mov,"mov	w0, 10","li	x10, 10"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
adrp,"adrp	x0, .LC7","lui	x10, %hi(.LC7)"
add,"add	x0, x0, :lo12:.LC7","add	x10, x10, %lo(.LC7)"
bl,bl	puts,call	puts
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w1, w1, w0","addw	x11, x11, x10"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
sub,"sub	w1, w1, w0","subw	x11, x11, x10"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
mul,"mul	w1, w1, w0","mulw	x11, x11, x10"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
ldr,"ldr	w1, [x29, 24]","lw	x11, 24(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
udiv,"udiv	w1, w1, w0","divuw	x11, x11, x10"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
ldr,"ldr	w0, [x29, 24]","lw	x10, 24(x8)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
udiv,"udiv	w2, w0, w1","divuw	x12, x10, x11"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
mul,"mul	w1, w2, w1","mulw	x11, x12, x11"
sub,"sub	w1, w0, w1","subw	x11, x10, x11"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
mov,"mov	x0, 1","li	x10, 1"
str,"str	x0, [x29, 32]","sd	x10, 32(x8)"
ldr,"ldr	x0, [x29, 32]","ld	x10, 32(x8)"
lsl,"lsl	x0, x0, 35","slli	x10, x10, 35"
str,"str	x0, [x29, 32]","sd	x10, 32(x8)"
mov,"mov	x0, 1","li	x10, 1"
str,"str	x0, [x29, 40]","sd	x10, 40(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
lsl,"lsl	x0, x0, 34","slli	x10, x10, 34"
str,"str	x0, [x29, 40]","sd	x10, 40(x8)"
adrp,"adrp	x0, .LC8","lui	x10, %hi(.LC8)"
add,"add	x0, x0, :lo12:.LC8","add	x10, x10, %lo(.LC8)"
bl,bl	puts,call	puts
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
add,"add	x1, x1, x0","add	x11, x11, x10"
adrp,"adrp	x0, .LC9","lui	x10, %hi(.LC9)"
add,"add	x0, x0, :lo12:.LC9","add	x10, x10, %lo(.LC9)"
bl,bl	printf,call	printf
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
sub,"sub	x1, x1, x0","sub	x11, x11, x10"
adrp,"adrp	x0, .LC10","lui	x10, %hi(.LC10)"
add,"add	x0, x0, :lo12:.LC10","add	x10, x10, %lo(.LC10)"
bl,bl	printf,call	printf
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
mul,"mul	x1, x1, x0","mul	x11, x11, x10"
adrp,"adrp	x0, .LC11","lui	x10, %hi(.LC11)"
add,"add	x0, x0, :lo12:.LC11","add	x10, x10, %lo(.LC11)"
bl,bl	printf,call	printf
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
sdiv,"sdiv	x1, x1, x0","div	x11, x11, x10"
adrp,"adrp	x0, .LC12","lui	x10, %hi(.LC12)"
add,"add	x0, x0, :lo12:.LC12","add	x10, x10, %lo(.LC12)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 32]","ld	x10, 32(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
sdiv,"sdiv	x2, x0, x1","div	x12, x10, x11"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
mul,"mul	x1, x2, x1","mul	x11, x12, x11"
sub,"sub	x1, x0, x1","sub	x11, x10, x11"
adrp,"adrp	x0, .LC13","lui	x10, %hi(.LC13)"
add,"add	x0, x0, :lo12:.LC13","add	x10, x10, %lo(.LC13)"
bl,bl	printf,call	printf
mov,"mov	x0, 1","li	x10, 1"
str,"str	x0, [x29, 48]","sd	x10, 48(x8)"
ldr,"ldr	x0, [x29, 48]","ld	x10, 48(x8)"
lsl,"lsl	x0, x0, 35","slli	x10, x10, 35"
str,"str	x0, [x29, 48]","sd	x10, 48(x8)"
mov,"mov	x0, 1","li	x10, 1"
str,"str	x0, [x29, 56]","sd	x10, 56(x8)"
ldr,"ldr	x0, [x29, 56]","ld	x10, 56(x8)"
lsl,"lsl	x0, x0, 34","slli	x10, x10, 34"
str,"str	x0, [x29, 56]","sd	x10, 56(x8)"
adrp,"adrp	x0, .LC14","lui	x10, %hi(.LC14)"
add,"add	x0, x0, :lo12:.LC14","add	x10, x10, %lo(.LC14)"
bl,bl	puts,call	puts
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
add,"add	x1, x1, x0","add	x11, x11, x10"
adrp,"adrp	x0, .LC15","lui	x10, %hi(.LC15)"
add,"add	x0, x0, :lo12:.LC15","add	x10, x10, %lo(.LC15)"
bl,bl	printf,call	printf
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
sub,"sub	x1, x1, x0","sub	x11, x11, x10"
adrp,"adrp	x0, .LC16","lui	x10, %hi(.LC16)"
add,"add	x0, x0, :lo12:.LC16","add	x10, x10, %lo(.LC16)"
bl,bl	printf,call	printf
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
mul,"mul	x1, x1, x0","mul	x11, x11, x10"
adrp,"adrp	x0, .LC17","lui	x10, %hi(.LC17)"
add,"add	x0, x0, :lo12:.LC17","add	x10, x10, %lo(.LC17)"
bl,bl	printf,call	printf
ldr,"ldr	x1, [x29, 32]","ld	x11, 32(x8)"
ldr,"ldr	x0, [x29, 40]","ld	x10, 40(x8)"
sdiv,"sdiv	x1, x1, x0","div	x11, x11, x10"
adrp,"adrp	x0, .LC18","lui	x10, %hi(.LC18)"
add,"add	x0, x0, :lo12:.LC18","add	x10, x10, %lo(.LC18)"
bl,bl	printf,call	printf
ldr,"ldr	x0, [x29, 32]","ld	x10, 32(x8)"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
sdiv,"sdiv	x2, x0, x1","div	x12, x10, x11"
ldr,"ldr	x1, [x29, 40]","ld	x11, 40(x8)"
mul,"mul	x1, x2, x1","mul	x11, x12, x11"
sub,"sub	x1, x0, x1","sub	x11, x10, x11"
adrp,"adrp	x0, .LC19","lui	x10, %hi(.LC19)"
add,"add	x0, x0, :lo12:.LC19","add	x10, x10, %lo(.LC19)"
bl,bl	printf,call	printf
mov,"mov	w0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 64","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 64 # writeback"
ret,ret,ret
sub,"sub	sp, sp, 32","addi	sp, sp, -32"
str,"str	x0, [sp, 8]","sd	x10, 8(sp)"
ldr,"ldr	x0, [sp, 8]","ld	x10, 8(sp)"
ldr,"ldr	w0, [x0]","lw	x10, 0(x10)"
str,"str	w0, [sp, 24]","sw	x10, 24(sp)"
ldr,"ldr	w0, [sp, 24]","lw	x10, 24(sp)"
str,"str	w0, [sp, 28]","sw	x10, 28(sp)"
str,"str	wzr, [sp, 20]","sw	x0, 20(sp)"
b,b	.L2,j	.L2
adrp,"adrp	x0, atomic_counter","lui	x10, %hi(atomic_counter)"
add,"add	x0, x0, :lo12:atomic_counter","add	x10, x10, %lo(atomic_counter)"
mov,"mov	w1, 1","li	x11, 1"
ldaddal,"ldaddal	w1, w1, [x0]","amoadd.w.aqrl	x11, x11, (x10)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
adrp,"adrp	x0, total_sum","lui	x10, %hi(total_sum)"
add,"add	x0, x0, :lo12:total_sum","add	x10, x10, %lo(total_sum)"
ldaddal,"ldaddal	w1, w2, [x0]","amoadd.w.aqrl	x12, x11, (x10)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
adrp,"adrp	x0, xor_check","lui	x10, %hi(xor_check)"
add,"add	x0, x0, :lo12:xor_check","add	x10, x10, %lo(xor_check)"
ldeoral,"ldeoral	w1, w2, [x0]","amoxor.w.aqrl	x12, x11, (x10)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
adrp,"adrp	x0, or_check","lui	x10, %hi(or_check)"
add,"add	x0, x0, :lo12:or_check","add	x10, x10, %lo(or_check)"
ldsetal,"ldsetal	w1, w2, [x0]","amoor.w.aqrl	x12, x11, (x10)"
mov,"mov	w1, 1000","li	x11, 1000"
ldr,"ldr	w0, [sp, 24]","lw	x10, 24(sp)"
sub,"sub	w0, w1, w0","subw	x10, x11, x10"
mov,"mov	w1, w0","mv	x11, x10"
adrp,"adrp	x0, and_check","lui	x10, %hi(and_check)"
add,"add	x0, x0, :lo12:and_check","add	x10, x10, %lo(and_check)"
mov,"mov	w2, w1","mv	x12, x11"
mvn,"mvn	w2, w2","mv	x12, x12not	x12, x12"
ldclral,"ldclral	w2, w2, [x0]","not	x27, x12amoand.w.aqrl	x12, x27, (x10)"
adrp,"adrp	x0, and_check_2","lui	x10, %hi(and_check_2)"
add,"add	x0, x0, :lo12:and_check_2","add	x10, x10, %lo(and_check_2)"
mov,"mov	w1, 1000","li	x11, 1000"
mov,"mov	w2, w1","mv	x12, x11"
mvn,"mvn	w2, w2","mv	x12, x12not	x12, x12"
ldclral,"ldclral	w2, w2, [x0]","not	x27, x12amoand.w.aqrl	x12, x27, (x10)"
adrp,"adrp	x0, min_check","lui	x10, %hi(min_check)"
add,"add	x0, x0, :lo12:min_check","add	x10, x10, %lo(min_check)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
ldsminal,"ldsminal x1, x1, [x0]","amomin.d.aqrl	x11, x11, (x10)"
adrp,"adrp	x0, max_check","lui	x10, %hi(max_check)"
add,"add	x0, x0, :lo12:max_check","add	x10, x10, %lo(max_check)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
ldsmaxal,"ldsmaxal x1, x1, [x0]","amomax.d.aqrl	x11, x11, (x10)"
adrp,"adrp	x0, unsigned_min_check","lui	x10, %hi(unsigned_min_check)"
add,"add	x0, x0, :lo12:unsigned_min_check","add	x10, x10, %lo(unsigned_min_check)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
lduminal,"lduminal x1, x1, [x0]","amominu.d.aqrl	x11, x11, (x10)"
adrp,"adrp	x0, unsigned_max_check","lui	x10, %hi(unsigned_max_check)"
add,"add	x0, x0, :lo12:unsigned_max_check","add	x10, x10, %lo(unsigned_max_check)"
ldr,"ldr	w1, [sp, 24]","lw	x11, 24(sp)"
ldumaxal,"ldumaxal x1, x1, [x0]","amomaxu.d.aqrl	x11, x11, (x10)"
ldr,"ldr	w0, [sp, 20]","lw	x10, 20(sp)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [sp, 20]","sw	x10, 20(sp)"
ldr,"ldr	w0, [sp, 20]","lw	x10, 20(sp)"
cmp,"cmp	w0, 9","addi	x25, x10, -9"
ble,ble	.L3,"ble	x25, x0, .L3"
mov,"mov	x0, 0","li	x10, 0"
add,"add	sp, sp, 32","addi	sp, sp, 32"
ret,ret,ret
mov,"mov	x16, 8048","li	x27, 8048"
sub,"sub	sp, sp, x16","sub	sp, sp, x27"
stp,"stp	x29, x30, [sp]","sd	x8, 0(sp)sd	ra, 8(sp)"
add,"add	x29, sp, 0","addi	x8, sp, 0"
adrp,"adrp	x0, :got:__stack_chk_guard","lui	x10, %hi(__stack_chk_guard)"
ldr,"ldr	x0, [x0, :got_lo12:__stack_chk_guard]","add	x10, x10, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
str,"str	x1, [x29, 8040]","li	x26, 8040 # synthesis of oversized immediateadd	x26, x26, x8 # converting offset register to addsd	x11, 0(x26)"
mov,"mov	x1,0","li	x11, 0"
str,"str	wzr, [x29, 28]","sw	x0, 28(x8)"
b,b	.L6,j	.L6
mov,"mov	x0, 4","li	x10, 4"
bl,bl	malloc,call	malloc
str,"str	x0, [x29, 32]","sd	x10, 32(x8)"
ldr,"ldr	x0, [x29, 32]","ld	x10, 32(x8)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
add,"add	x1, x29, 40","addi	x11, x8, 40"
ldrsw,"ldrsw	x0, [x29, 28]","lw	x10, 28(x8)"
lsl,"lsl	x0, x0, 3","slli	x10, x10, 3"
add,"add	x4, x1, x0","add	x14, x11, x10"
adrp,"adrp	x0, mythread","lui	x10, %hi(mythread)"
add,"add	x0, x0, :lo12:mythread","add	x10, x10, %lo(mythread)"
ldr,"ldr	x3, [x29, 32]","ld	x13, 32(x8)"
mov,"mov	x2, x0","mv	x12, x10"
mov,"mov	x1, 0","li	x11, 0"
mov,"mov	x0, x4","mv	x10, x14"
bl,bl	pthread_create,call	pthread_create
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
cmp,"cmp	w0, 999","addi	x25, x10, -999"
ble,ble	.L7,"ble	x25, x0, .L7"
str,"str	wzr, [x29, 28]","sw	x0, 28(x8)"
b,b	.L8,j	.L8
ldrsw,"ldrsw	x0, [x29, 28]","lw	x10, 28(x8)"
lsl,"lsl	x0, x0, 3","slli	x10, x10, 3"
add,"add	x1, x29, 40","addi	x11, x8, 40"
ldr,"ldr	x0, [x1, x0]","add	x26, x10, x11 # converting offset register to addld	x10, 0(x26)"
mov,"mov	x1, 0","li	x11, 0"
bl,bl	pthread_join,call	pthread_join
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
cmp,"cmp	w0, 999","addi	x25, x10, -999"
ble,ble	.L9,"ble	x25, x0, .L9"
adrp,"adrp	x0, atomic_counter","lui	x10, %hi(atomic_counter)"
add,"add	x0, x0, :lo12:atomic_counter","add	x10, x10, %lo(atomic_counter)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
bl,bl	printf,call	printf
adrp,"adrp	x0, total_sum","lui	x10, %hi(total_sum)"
add,"add	x0, x0, :lo12:total_sum","add	x10, x10, %lo(total_sum)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
adrp,"adrp	x0, xor_check","lui	x10, %hi(xor_check)"
add,"add	x0, x0, :lo12:xor_check","add	x10, x10, %lo(xor_check)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
adrp,"adrp	x0, or_check","lui	x10, %hi(or_check)"
add,"add	x0, x0, :lo12:or_check","add	x10, x10, %lo(or_check)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC3","lui	x10, %hi(.LC3)"
add,"add	x0, x0, :lo12:.LC3","add	x10, x10, %lo(.LC3)"
bl,bl	printf,call	printf
adrp,"adrp	x0, and_check","lui	x10, %hi(and_check)"
add,"add	x0, x0, :lo12:and_check","add	x10, x10, %lo(and_check)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC4","lui	x10, %hi(.LC4)"
add,"add	x0, x0, :lo12:.LC4","add	x10, x10, %lo(.LC4)"
bl,bl	printf,call	printf
adrp,"adrp	x0, and_check_2","lui	x10, %hi(and_check_2)"
add,"add	x0, x0, :lo12:and_check_2","add	x10, x10, %lo(and_check_2)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC5","lui	x10, %hi(.LC5)"
add,"add	x0, x0, :lo12:.LC5","add	x10, x10, %lo(.LC5)"
bl,bl	printf,call	printf
adrp,"adrp	x0, min_check","lui	x10, %hi(min_check)"
add,"add	x0, x0, :lo12:min_check","add	x10, x10, %lo(min_check)"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
adrp,"adrp	x0, .LC6","lui	x10, %hi(.LC6)"
add,"add	x0, x0, :lo12:.LC6","add	x10, x10, %lo(.LC6)"
bl,bl	printf,call	printf
adrp,"adrp	x0, max_check","lui	x10, %hi(max_check)"
add,"add	x0, x0, :lo12:max_check","add	x10, x10, %lo(max_check)"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
adrp,"adrp	x0, .LC7","lui	x10, %hi(.LC7)"
add,"add	x0, x0, :lo12:.LC7","add	x10, x10, %lo(.LC7)"
bl,bl	printf,call	printf
adrp,"adrp	x0, unsigned_min_check","lui	x10, %hi(unsigned_min_check)"
add,"add	x0, x0, :lo12:unsigned_min_check","add	x10, x10, %lo(unsigned_min_check)"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
adrp,"adrp	x0, .LC8","lui	x10, %hi(.LC8)"
add,"add	x0, x0, :lo12:.LC8","add	x10, x10, %lo(.LC8)"
bl,bl	printf,call	printf
adrp,"adrp	x0, unsigned_max_check","lui	x10, %hi(unsigned_max_check)"
add,"add	x0, x0, :lo12:unsigned_max_check","add	x10, x10, %lo(unsigned_max_check)"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
adrp,"adrp	x0, .LC9","lui	x10, %hi(.LC9)"
add,"add	x0, x0, :lo12:.LC9","add	x10, x10, %lo(.LC9)"
bl,bl	printf,call	printf
mov,"mov	w0, 0","li	x10, 0"
adrp,"adrp	x1, :got:__stack_chk_guard","lui	x11, %hi(__stack_chk_guard)"
ldr,"ldr	x1, [x1, :got_lo12:__stack_chk_guard]","add	x11, x11, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x2, [x29, 8040]","li	x26, 8040 # synthesis of oversized immediateadd	x26, x26, x8 # converting offset register to addld	x12, 0(x26)"
ldr,"ldr	x1, [x1]","ld	x11, 0(x11)"
eor,"eor	x1, x2, x1","xor	x11, x12, x11"
cmp,"cmp	x1, 0","addi	x25, x11, 0"
beq,beq	.L11,"beq	x25, x0, .L11"
bl,bl	__stack_chk_fail,call	__stack_chk_fail
ldp,"ldp	x29, x30, [sp]","ld	x8, 0(sp)ld	ra, 8(sp)"
mov,"mov	x16, 8048","li	x27, 8048"
add,"add	sp, sp, x16","add	sp, sp, x27"
ret,ret,ret
stp,"stp	x29, x30, [sp, -48]!","sd	x8, -48(sp)sd	ra, -40(sp)addi	sp, sp, -48 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
adrp,"adrp	x0, current_thread_index","lui	x10, %hi(current_thread_index)"
add,"add	x0, x0, :lo12:current_thread_index","add	x10, x10, %lo(current_thread_index)"
ldar,"ldar	w0, [x0]","lw	x10, 0(x10)fence	iorw,iorw # making implicit fence semantics explicit"
str,"str	w0, [x29, 44]","sw	x10, 44(x8)"
ldr,"ldr	w1, [x29, 44]","lw	x11, 44(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
cmp,"cmp	w1, w0","sub	x25, x11, x10"
beq,beq	.L6,"beq	x25, x0, .L6"
adrp,"adrp	x0, ts","lui	x10, %hi(ts)"
add,"add	x0, x0, :lo12:ts","add	x10, x10, %lo(ts)"
mov,"mov	x1, 0","li	x11, 0"
bl,bl	nanosleep,call	nanosleep
b,b	.L4,j	.L4
nop,nop,nop
nop,nop,nop
ldp,"ldp	x29, x30, [sp], 48","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 48 # writeback"
ret,ret,ret
sub,"sub	sp, sp, 16","addi	sp, sp, -16"
str,"str	w0, [sp, 12]","sw	x10, 12(sp)"
ldr,"ldr	w1, [sp, 12]","lw	x11, 12(sp)"
adrp,"adrp	x0, current_thread_index","lui	x10, %hi(current_thread_index)"
add,"add	x0, x0, :lo12:current_thread_index","add	x10, x10, %lo(current_thread_index)"
stlr,"stlr	w1, [x0]","fence	iorw,iorw  # making implicit fence semantics explicitsw	x11, 0(x10)"
nop,nop,nop
add,"add	sp, sp, 16","addi	sp, sp, 16"
ret,ret,ret
stp,"stp	x29, x30, [sp, -48]!","sd	x8, -48(sp)sd	ra, -40(sp)addi	sp, sp, -48 # writeback"
add,"add	x29, sp, 0","addi	x8, sp, 0"
str,"str	x0, [x29, 24]","sd	x10, 24(x8)"
ldr,"ldr	x0, [x29, 24]","ld	x10, 24(x8)"
ldr,"ldr	w0, [x0]","lw	x10, 0(x10)"
str,"str	w0, [x29, 40]","sw	x10, 40(x8)"
ldr,"ldr	w0, [x29, 40]","lw	x10, 40(x8)"
str,"str	w0, [x29, 44]","sw	x10, 44(x8)"
ldr,"ldr	w0, [x29, 40]","lw	x10, 40(x8)"
bl,bl	acquire_lock,call	acquire_lock
adrp,"adrp	x0, .LC0","lui	x10, %hi(.LC0)"
add,"add	x0, x0, :lo12:.LC0","add	x10, x10, %lo(.LC0)"
ldr,"ldr	w1, [x29, 40]","lw	x11, 40(x8)"
bl,bl	printf,call	printf
str,"str	wzr, [x29, 36]","sw	x0, 36(x8)"
b,b	.L9,j	.L9
adrp,"adrp	x0, non_atomic_counter","lui	x10, %hi(non_atomic_counter)"
add,"add	x0, x0, :lo12:non_atomic_counter","add	x10, x10, %lo(non_atomic_counter)"
ldr,"ldr	w0, [x0]","lw	x10, 0(x10)"
add,"add	w1, w0, 1","addiw	x11, x10, 1"
adrp,"adrp	x0, non_atomic_counter","lui	x10, %hi(non_atomic_counter)"
add,"add	x0, x0, :lo12:non_atomic_counter","add	x10, x10, %lo(non_atomic_counter)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
adrp,"adrp	x0, atomic_counter","lui	x10, %hi(atomic_counter)"
add,"add	x0, x0, :lo12:atomic_counter","add	x10, x10, %lo(atomic_counter)"
mov,"mov	w1, 1","li	x11, 1"
ldaddal,"ldaddal	w1, w1, [x0]","amoadd.w.aqrl	x11, x11, (x10)"
ldr,"ldr	w0, [x29, 36]","lw	x10, 36(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 36]","sw	x10, 36(x8)"
ldr,"ldr	w0, [x29, 36]","lw	x10, 36(x8)"
cmp,"cmp	w0, 999","addi	x25, x10, -999"
ble,ble	.L10,"ble	x25, x0, .L10"
ldr,"ldr	w0, [x29, 40]","lw	x10, 40(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
bl,bl	release_lock,call	release_lock
mov,"mov	x0, 0","li	x10, 0"
ldp,"ldp	x29, x30, [sp], 48","ld	x8, 0(sp)ld	ra, 8(sp)addi	sp, sp, 48 # writeback"
ret,ret,ret
mov,"mov	x16, 8048","li	x27, 8048"
sub,"sub	sp, sp, x16","sub	sp, sp, x27"
stp,"stp	x29, x30, [sp]","sd	x8, 0(sp)sd	ra, 8(sp)"
add,"add	x29, sp, 0","addi	x8, sp, 0"
adrp,"adrp	x0, :got:__stack_chk_guard","lui	x10, %hi(__stack_chk_guard)"
ldr,"ldr	x0, [x0, :got_lo12:__stack_chk_guard]","add	x10, x10, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x1, [x0]","ld	x11, 0(x10)"
str,"str	x1, [x29, 8040]","li	x26, 8040 # synthesis of oversized immediateadd	x26, x26, x8 # converting offset register to addsd	x11, 0(x26)"
mov,"mov	x1,0","li	x11, 0"
str,"str	wzr, [x29, 28]","sw	x0, 28(x8)"
b,b	.L13,j	.L13
mov,"mov	x0, 4","li	x10, 4"
bl,bl	malloc,call	malloc
str,"str	x0, [x29, 32]","sd	x10, 32(x8)"
ldr,"ldr	x0, [x29, 32]","ld	x10, 32(x8)"
ldr,"ldr	w1, [x29, 28]","lw	x11, 28(x8)"
str,"str	w1, [x0]","sw	x11, 0(x10)"
add,"add	x1, x29, 40","addi	x11, x8, 40"
ldrsw,"ldrsw	x0, [x29, 28]","lw	x10, 28(x8)"
lsl,"lsl	x0, x0, 3","slli	x10, x10, 3"
add,"add	x4, x1, x0","add	x14, x11, x10"
adrp,"adrp	x0, mythread","lui	x10, %hi(mythread)"
add,"add	x0, x0, :lo12:mythread","add	x10, x10, %lo(mythread)"
ldr,"ldr	x3, [x29, 32]","ld	x13, 32(x8)"
mov,"mov	x2, x0","mv	x12, x10"
mov,"mov	x1, 0","li	x11, 0"
mov,"mov	x0, x4","mv	x10, x14"
bl,bl	pthread_create,call	pthread_create
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
cmp,"cmp	w0, 999","addi	x25, x10, -999"
ble,ble	.L14,"ble	x25, x0, .L14"
str,"str	wzr, [x29, 28]","sw	x0, 28(x8)"
b,b	.L15,j	.L15
ldrsw,"ldrsw	x0, [x29, 28]","lw	x10, 28(x8)"
lsl,"lsl	x0, x0, 3","slli	x10, x10, 3"
add,"add	x1, x29, 40","addi	x11, x8, 40"
ldr,"ldr	x0, [x1, x0]","add	x26, x10, x11 # converting offset register to addld	x10, 0(x26)"
mov,"mov	x1, 0","li	x11, 0"
bl,bl	pthread_join,call	pthread_join
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
add,"add	w0, w0, 1","addiw	x10, x10, 1"
str,"str	w0, [x29, 28]","sw	x10, 28(x8)"
ldr,"ldr	w0, [x29, 28]","lw	x10, 28(x8)"
cmp,"cmp	w0, 999","addi	x25, x10, -999"
ble,ble	.L16,"ble	x25, x0, .L16"
adrp,"adrp	x0, atomic_counter","lui	x10, %hi(atomic_counter)"
add,"add	x0, x0, :lo12:atomic_counter","add	x10, x10, %lo(atomic_counter)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC1","lui	x10, %hi(.LC1)"
add,"add	x0, x0, :lo12:.LC1","add	x10, x10, %lo(.LC1)"
bl,bl	printf,call	printf
adrp,"adrp	x0, non_atomic_counter","lui	x10, %hi(non_atomic_counter)"
add,"add	x0, x0, :lo12:non_atomic_counter","add	x10, x10, %lo(non_atomic_counter)"
ldr,"ldr	w1, [x0]","lw	x11, 0(x10)"
adrp,"adrp	x0, .LC2","lui	x10, %hi(.LC2)"
add,"add	x0, x0, :lo12:.LC2","add	x10, x10, %lo(.LC2)"
bl,bl	printf,call	printf
mov,"mov	w0, 0","li	x10, 0"
adrp,"adrp	x1, :got:__stack_chk_guard","lui	x11, %hi(__stack_chk_guard)"
ldr,"ldr	x1, [x1, :got_lo12:__stack_chk_guard]","add	x11, x11, %lo(__stack_chk_guard) # load from GOT -> ADD!"
ldr,"ldr	x2, [x29, 8040]","li	x26, 8040 # synthesis of oversized immediateadd	x26, x26, x8 # converting offset register to addld	x12, 0(x26)"
ldr,"ldr	x1, [x1]","ld	x11, 0(x11)"
eor,"eor	x1, x2, x1","xor	x11, x12, x11"
cmp,"cmp	x1, 0","addi	x25, x11, 0"
beq,beq	.L18,"beq	x25, x0, .L18"
bl,bl	__stack_chk_fail,call	__stack_chk_fail
ldp,"ldp	x29, x30, [sp]","ld	x8, 0(sp)ld	ra, 8(sp)"
mov,"mov	x16, 8048","li	x27, 8048"
add,"add	sp, sp, x16","add	sp, sp, x27"
ret,ret,ret

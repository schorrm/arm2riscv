start: directive? label? operation?
label: LABEL
LABEL: CNAME ":" 
operation: opcode operand*
directive: /\..*/ | "#" CNAME
operand: (reglist 
        | register
        | immediate 
        | address 
        | label_target
        | indirect
        | dotlabel
        | proc_load 
        | shifted_register ) writeback?



dotlabel: DOTLABEL 
DOTLABEL: "." CNAME
reglist: "{" (register | register_range)+ "}"  // ARM v7
register_range: register "-" register
indirect: "[" register offset? "]"
offset: immediate | proc_load | register | shifted_register
immediate: imm_value  | "#" imm_value
address: "=" imm_value
?imm_value:  hex_val | dec_val
hex_val.2: "0x" HEXNUM
?dec_val: NUMBER | SIGNED_NUMBER
label_target: CNAME | DOTLABEL
shifted_register: register shift_type shift_by?
shift_by: immediate | register
opcode: CNAME
proc_load: ":" mode ":" label_target | "#:" mode ":" label_target
target: dotlabel | label_target
mode: CNAME
// MODE: "lo12" | "pg_hi21"

HEXNUM: HEXDIGIT+

%import common.CNAME
%import common.SIGNED_NUMBER
%import common.DIGIT
%import common.NUMBER
%import common.LETTER
%import common.HEXDIGIT
%import common.WS
%import common.WS_INLINE
%import common.NEWLINE
%import .grammar.arm_globals.addr_mode
%import .grammar.arm_globals.register
%import .grammar.arm_globals.float_reg
%import .grammar.arm_globals.float16
%import .grammar.arm_globals.float32
%import .grammar.arm_globals.double64
%import .grammar.arm_globals.half_reg
%import .grammar.arm_globals.full_reg
%import .grammar.arm_globals.writeback
%import .grammar.arm_globals.condition_code
%import .grammar.arm_globals.shift_type
SLCOMMENT: "//" /.*/ 
COMMENT: ";" /[^\n]/*
%ignore WS
%ignore COMMENT
%ignore SLCOMMENT
%ignore ","
